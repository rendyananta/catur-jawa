<?php


namespace App\Jobs;


use App\Events\WinnerSelected;
use App\Match;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;

/**
 * Auto generated by IntelliJ IDEA
 *
 * @author<rendy, rendyananta66@gmail.com>
 * at 11/12/2019 - 14:39
 */
class CheckMovement
{
    /**
     * @var Request
     */
    public $request;

    /**
     * @var Match
     */
    public $match;

    /**
     * @var array
     */
    public $winner;

    public function __construct(Match $match)
    {
        $this->request = request();
        $this->match = $match;
    }

    /**
     * Handle the job
     */
    public function handle()
    {
        if (! Cache::has('match_movement_' . $this->match->id)) {
            Cache::put('match_movement_' . $this->match->id, $this->request->input('states'), 60 * 30);
        }

        $this->winner = $this->getWinLines();

        if (count($this->winner) > 0) {

            $this->match->winner()->associate($this->request->user());

            if ($this->request->user()->id === $this->match->invitee->id) {
                $this->match->loser()->associate($this->match->inviter_id);
            } else {
                $this->match->loser()->associate($this->match->invitee_id);
            }
            $this->match->fill([
                'states' => $this->request->input('states')
            ]);
            $this->match->save();
            event(new WinnerSelected($this->match->refresh()));
        }

        return $this;
    }

    /**
     * @param $dx
     * @param $dy
     * @return array
     */
    private function checkSquareStreak($dx, $dy)
    {
        $lastDist = 0;
        $lastTo = null;

        $states = Cache::get('match_movement_' . $this->match->id);

        for ($dist = 0; $dist <= 4; $dist++) {
            $x = $this->request->input('from.x') + $dx * $dist;
            $y = $this->request->input('from.y') + $dy * $dist;
            $to = !empty($states[$x])
                && !empty($states[$x][$y])
                && !empty($states[$x][$y]['content'])
                && !empty($states[$x][$y]['user_id']);

            if (!$to) break;
            if ($to['user_id'] !== $this->request->user()->id) break;

            $lastDist = $dist;
            $lastTo = $to;
        }

        return [
            'dist' => $lastTo,
            'x' => $lastDist['x'] ?? $this->request->input('from.x'),
            'y' => $lastDist['y'] ?? $this->request->input('from.y')
        ];
    }

    /**
     * @param $dx
     * @param $dy
     * @param int $winStreak
     * @return array|null
     */
    private function getWinLine($dx, $dy, $winStreak = 5)
    {
        $a = $this->checkSquareStreak(-$dx, -$dy);
        $b = $this->checkSquareStreak($dx, $dy);

        if ($a['dist'] + $b['dist'] + 1 >= $winStreak) {
            return [
                'x1' => $a['x'],
                'y1' => $b['y'],
                'x2' => $a['x'],
                'y2' => $a['y']
            ];
        }

        return null;
    }

    /**
     * @return array
     */
    private function getWinLines()
    {
        return array_filter([
                $this->getWinLine(1, 0),
                $this->getWinLine(0, 1),
                $this->getWinLine( 1, 1),
                $this->getWinLine( 1, -1),
        ], function ($item) {
            return !empty($item);
        });
    }
}
